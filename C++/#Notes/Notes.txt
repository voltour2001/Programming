Basic Hello World Program:

    #include <iostream>                 Include libraries

    int main() {                        The main() function (beginning)
    std::cout << "Dear Self,\n";
    }                                   End of function

How to Compile & Execute:

    To Compile (translate to machine language):
        g++ <file-name>.cpp
    The above command will create an executable, to run that executable:
        ./a.out

    You can put the option "-o <name-of-executable>"
        g++ <file-name>.cpp -o <name-of-executable>
    The above command will create an executable, to run that executable:
        ./<name-of-executable>

Comments:

    //Single line comment
    std::cout << "hi"; // Outputs "hi"

    /*
    Multi line comments 
    */

Variables:
    ---------------------------------------------------------
    |TYPE    |          USAGE            |    EXAMPLES      |
    |-------------------------------------------------------|
    |int     |   integer numbers         |    0, 420        |
    |double  |   floating point numbers  |    3.14, -200.0  |
    |char    |   character               |    'a', '@'      |
    |string  |   sequence of characters  |   "Hello World"  |
    |bool    |   truth values            |    true, false   |
    ---------------------------------------------------------

    Declaration:
        int year;
        int score = 0;
        double x = 2.345;
        char grade = 'A';
        bool safe = true;
    
    If you put "=" while declaring the variable, you are including
    an initial value (not necessary).

    string:
        To declare a string it is a litle bit different.
        std::string x = "Hello World"

Arithmetric Operators:

    +    addition
    -    subtraction
    *    multiplication
    /    division
    %    modulo (divides and gives the remainder)

    EXAMPLES:

        int score = 0;
        // score is 0
        
        score = 4 + 2;
        // it is now 6
        
        score = 4 - 2;
        // it is now 2
        
        score = 4 * 2;
        // it is now 8
        
        score = 4 / 2;
        // and now 2
        
        score = 5 % 2;
        // and now 1

Chaining:

    int age = 28;
    std::cout << "Hello, I am " << age << " years old\n";

User Input:

    "std::cout << ..." Is used for output.
    "std::cin >> ..."  Is used for input.

    std::cout << "Enter your password: "; 
    std::cin >> password;

Statements:

    if (condition){

    some code

    }else if (condition){

    some code

    }else{

    some code

    }

    EXAMPLE:
        if (grade == 9) {
        
        std::cout << "Freshman\n";
        
        } 
        else if (grade == 10) {
        
        std::cout << "Sophomore\n";
        
        }
        else if (grade == 11) {
        
        std::cout << "Junior\n";
        
        } 
        else if (grade == 12) {
        
        std::cout << "Senior\n";
        
        }
        else {
        
        std::cout << "Super Senior\n";
        
        }

    Switch Statement:
        switch (grade) {
        
        case 9:
            std::cout << "Freshman\n";
            break;
        case 10:
            std::cout << "Sophomore\n";
            break;
        case 11:
            std::cout << "Junior\n";
            break;
        case 12:
            std::cout << "Senior\n";
            break;
        default:
            std::cout << "Invalid\n";
            break;
        
        }

Relational Operators:

    ==   equal to
    !=   not equal to
    >    greater than
    <    less than
    >=   greater than or equal to
    <=   less than or equal to

Logical Operators:
    "&&"  or better known as   "and"   logical operator
    "||"  or better known as   "or"    logical operator
    "!"   or better known as   "not"   logical operator

Loops:

    while:
            while (condition) {
            statements
            }
        
            EXAMPLE:

                1:
                    while (guess != 8) {
                    std::cout << "Wrong guess, try again: ";
                    std::cin >> guess;
                    }

                2:
                    while (guess != 8 && tries < 50) {
                    std::cout << "Wrong guess, try again: ";
                    std::cin >> guess;

                    tries++;
                    }

    for:

        for (int i = 0; i < 20; i++) {
        std::cout << "I will not throw paper airplanes in class.\n";        
        }

        Let’s take a closer look:
            for (int i = 0; i < 20; i++)

            The initialization of a counter: int i = 0
            The continue condition: i < 20
            The change in the counter (in this case an increment): i++

Compile-time Errors:

    When we are writing C++ programs, the compiler is our first line of defense against errors.

    There are two types of compile-time errors:

    1)Syntax errors: Errors that occur when we violate the rules of C++ syntax.
    2)Type errors: Errors that occur when there are mismatch between the types we declared.

Link-time Errors:

    As our program gets bigger, it is good practice to divide the program into separate files. After compiling them, the linker takes those separate object files and combines them into a single executable file. Link-time errors are found by the linker when it is trying to combine object files into an executable file.

    Some common link-time errors:

    1)Using a function that was never defined (more on this later)
    2)Writing Main() instead of main()

Run-time Errors:

    Errors which happen during program execution (run-time) after successful compilation are called run-time errors. 
    Run-time errors occur when a program with no compile-time errors and link-time errors asks the computer 
    to do something that the computer is unable to reliably do.

    It happens after we give the ./ execute command:    "$./a.out"

    Some common run-time errors:

    1)Division by zero also known as division error. These types of error are hard to find as the compiler doesn’t point to the line at which the error occurs.
    2)Trying to open a file that doesn’t exist

Logic Errors:

    These types of errors which provide incorrect output, but appears to be error-free, are called logical errors. 
    These are one of the most common errors that happen to beginners and also usually the most difficult to find and eliminate.
    Logical errors solely depend on the logical thinking of the programmer. 

    Some common logic errors:

    1)Program logic is flawed
    2)Some “silly” mistake in an if statement or a for/while loop

Vectors:

    Intro:

        The std::vector lives in the <vector> header.
        So first, we need to add this line of code at the top of the program:

        #include <vector>

        And the syntax to create a vector looks like:

        std::vector<type> name;

        So to define a vector of ints called calories_today:

        std::vector<int> calories_today;

        Inside the angle brackets is the data type of the vector. 
        After the angle brackets is the name of the vector.

        Note: 
            The type of the vector (i.e., what data type is stored inside) 
            cannot be changed after the declaration.

    Initializing a Vector:

        std::vector<double> location = {42.651443, -73.749302};

        If we don’t know what values we want to add yet:

        std::vector<double> location(2);

        We are creating a double vector and setting the initial size
        to 2 using parentheses. 
        (both vectors will be 0.0 because 0.0 is the default value for double.)

    Index:

        An index refers to an element’s 
        position within an ordered list(starts with 0).

        std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};

            0='a'   1='e'   2='i'   3='o'   4='u'

        To outputeach of the elements:

        std::cout << vowels[0] << "\n";     --->    a
        std::cout << vowels[1] << "\n";     --->    e
        std::cout << vowels[2] << "\n";     --->    i
        std::cout << vowels[3] << "\n";     --->    o
        std::cout << vowels[4] << "\n";     --->    u

    Adding and Removing Elements:

        .push_back()

        To add a new element to the “back”, or end of the vector, 
        we can use the .push_back() function.

            std::vector<std::string> alphabet = {"abc", "def", "ghi"};
            alphabet.push_back("gkl")

            will add "gkl" as a new item in the vector alphabet


        .pop_back()

        You can also remove elements from the 
        “back” of the vector using .pop_back().

            alphabet.pop_back();

            will remove the last item ("gkl") 

    .size():

        This function returns the number of elements in the vector.

            std::vector<char> grades = {'A', 'B', 'C', 'D', 'E'}
            std::cout << grades.size() << "\n";

        Will return 5

    Operations:


        So you want to change each of the values within a vector?

        You can use a for loop!

            std::vector<int> num = {0, 10, 20};

            for (int i = 0; i < num.size(); i++) {
            
            num[i] = num[i] + 10;
            
            }

        starting vector = {0, 10, 20}
        vector at the end = {10, 20, 30}

Functions:

    Structure:
        return_type function_name(parameters) {
        
        // Code block here
        
        return output_if_there_is_any;
        
        }

        A function can return most data types we’ve covered, 
        including double, int, bool, char, std::string, and std::vector.
        
        EXAMPLE:
            std::string always_blue() {
            
            return "blue!\n";
            
            }

        Note: 
            The return statement is the last line of 
            code that a function will execute. For example:

    Void:
        A void function, also known as a subroutine, 
        has no return value, making it ideally suited for 
        situations where you just want to print stuff to the terminal.

        EXAMPLE:
            void animal_chat() {
            
            std::string fav, pet;
            
            std::cout << "What's your favorite animal?\n";
            std::cin >> fav;
            
            std::cout << "Do you have a " << fav << " as a pet? y/n\n";
            std::cin >> pet;
            
            if (pet == "y") {
            
                std::cout << "How lucky you have a " << fav << " as a pet!\n";
            
            } else {
            
                std::cout << "That's too bad.\n";
            
            }
            
            }

Parameters & Arguments:

    You can add as many parameter/Arguments as you like, 
    but you will have to remember their order when you call the function.

    Note:
        You need to add the type of the parameter before the name.
        That can be any type like "std::string <var_name>" and "int <var_name>".

    EXAMPLE:

        int do_something(int num, std::string fruit){

            // stuff happens

        }

        do_something(5, "apples" )

Scope:

    Variables defined in global scope are 
    accessible throughout the program.

    Variables defined in a function have local scope and are 
    only accessible inside the function.

    EXAMPLE:

        #include <iostream>

        std::string g = "global variable";

        void fun1(std::string x){
            std::string local = "local variable";       // local is not a global variable so we can not call it from main. 
            std::cout << local << ", " << g << "\n"; 
        }

        int main(){
            fun1("amazing");
            std::cout << g; 
            // If we call local in main() we will get an error because the variable is out of main's scope
        }

Multi-File Programs:

    when your code gets longer, it’s common 
    to use the same function in more than one .cpp file.

    To make your code cleaner and more modular, 
    you can move the function definitions over to another 
    specialized .cpp file (e.g., my_functions.cpp), 
    leaving a list of declarations above main().

    Declaration & Definition:
        // Declaration at the top:
        void eat();

        // Definition at the bottom:
        void eat() {
        
        std::cout << "nom nom nom\n";
        
        }

    But files, like functions, have scope. So to make the program
    learn about these functions definitions in another file.

    Before your program even compiles, 
    it links together any files you list in your compilation 
    statement into a single executable:
    |-------------------------------|
    | g++ main.cpp my_functions.cpp |
    |-------------------------------|


    For Example Check Folder "Multi-File-Program" in.
    /C++/Concepts/Multi-File-Program

Header:

    Header = call declarations from another file.

    if your function definitions are in my_functions.cpp, 
    the corresponding header file would be my_functions.hpp or my_functions.h.
    (not necessary to have the same name)

    You dont have to link the header like you do with the second
    file that hase the definitions. All you need to do is
    |=============================|
    | #include "my_functions.hpp" |
    |=============================|

    This line pastes in everything from my_functions.hpp. 



    For Example Check Folder "Multi-File-Program" in.

    .\C++\Concepts\Multi-File-Program

Inline:

        An inline function is a function definition, 
        usually in a header file, qualified by the "inline" keyword, 
        which advises the compiler to insert the function’s body where the function call is. 
        If a modification is made in an inline function, 
        it would require all files containing a call to that function to be recompiled.

    Online material for inline functions.

        https://www.codecademy.com/courses/learn-c-plus-plus/lessons/cpp-functions-scope-flexiblity/exercises/cpp-inline-functions
        https://www.geeksforgeeks.org/inline-functions-cpp/

    Example:

        For Example Check Folder "Inline-Functions" in.

        .\C++\Concepts\Inline-Functions